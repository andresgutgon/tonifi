{"version":3,"file":"component---src-templates-curriculum-js-f7cb1276549a8f5c522c.js","mappings":"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","sources":["webpack://tonifi-personal-page/./src/components/Content/index.module.scss","webpack://tonifi-personal-page/./src/components/Content/index.js","webpack://tonifi-personal-page/./src/hooks/useFormatMessage.js","webpack://tonifi-personal-page/./node_modules/react-intl/lib/src/components/useIntl.js","webpack://tonifi-personal-page/./src/components/TranslatedMessage/index.js","webpack://tonifi-personal-page/./src/components/CurriculumVitae/index.module.scss","webpack://tonifi-personal-page/./src/components/CurriculumVitae/index.js","webpack://tonifi-personal-page/./src/templates/curriculum.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"index-module--content--Ni+7M\",\"contentInner\":\"index-module--contentInner--1KuvZ\"};","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './index.module.scss'\n\nconst Content = ({ children }) => (\n  <div className={styles.content}>\n    <div className={styles.contentInner}>\n      {children}\n    </div>\n  </div>\n)\n\nContent.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nexport default Content\n","import React from 'react';\nimport { useIntl } from 'react-intl'\n\nexport default function useFormatMessage (messageId) {\n  const intl = useIntl();\n  return intl.formatMessage({ id: messageId })\n}\n","import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n  var intl = React.useContext(Context);\n  invariantIntlContext(intl);\n  return intl;\n}","import React, { useContext } from 'react'\nimport AppContext from '../../context/AppContext'\n\nexport default function TranslatedMessage({ text }) {\n  const app = useContext(AppContext)\n  const translated = text[app.locale]\n\n  if (typeof text === 'string') return text\n\n  if (!translated) {\n    console.log('wat', text)\n  }\n\n  return translated || null\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"infoLine\":\"index-module--infoLine--AtrCN\",\"separator\":\"index-module--separator--R6HJw\",\"sectionTitle\":\"index-module--sectionTitle--hsma0\",\"category\":\"index-module--category--gRxzI\",\"categoryTitle\":\"index-module--categoryTitle--SJRLn\",\"items\":\"index-module--items--xwM56\",\"row\":\"index-module--row--lWa63\",\"col\":\"index-module--col--9d+PR\",\"incompleted\":\"index-module--incompleted--YCsuY\",\"item\":\"index-module--item--KKPer\",\"places\":\"index-module--places--iS7PJ\",\"place\":\"index-module--place---Rm-W\",\"placeList\":\"index-module--placeList--j8o0I\",\"tag\":\"index-module--tag--bJzGv\",\"education\":\"index-module--education--EvYiR\",\"educationItem\":\"index-module--educationItem--wrLVD\",\"title\":\"index-module--title--by6Oj\",\"metadataList\":\"index-module--metadataList--1jFXD\",\"metadata\":\"index-module--metadata--ovZ8N\"};","import * as React from 'react'\nimport cn from 'classnames/bind'\n\nimport { FormattedMessage } from 'react-intl'\nimport TranslatedMessage from '../TranslatedMessage'\nimport useFormatMessage from '../../hooks/useFormatMessage'\nimport Header from '../Header'\nimport Content from '../Content'\n\nimport styles from './index.module.scss'\nconst cx = cn.bind(styles)\n\nconst METADATA = {\n  teacher: 'Professor/a',\n  director: 'Director',\n  author: 'Autor',\n  years: 'Anys',\n  company: 'Companyia',\n  production: 'Productora',\n}\n\nfunction itemsGrouped(items) {\n  return items.reduce((memo, item) => {\n    const lastRowIndex = memo.length - 1\n    const lastRow = memo[lastRowIndex]\n    if (lastRow && lastRow.length < 2) {\n      memo[lastRowIndex].push(item)\n    } else {\n      memo.push([item])\n    }\n    return memo\n  }, [])\n}\n\nfunction MetaLink({ metaKey, url, name }) {\n  return (\n    <div className={styles.metadata}>\n      <strong>{METADATA[metaKey]}</strong>\n      {!!url && (\n        <a href={url} target=\"_bkank\">\n          <TranslatedMessage text={name} />\n        </a>\n      )}\n      {!url && <TranslatedMessage text={name} />}\n    </div>\n  )\n}\n\nfunction hasMetadata(item) {\n  return !!Object.keys(METADATA).map((_meta) => !item.meta)\n}\n\nfunction Title({ title }) {\n  return (\n    <h4 className={styles.title}>\n      <TranslatedMessage text={title} />\n    </h4>\n  )\n}\n\nfunction MetadataItem({ metaKey, item }) {\n  const content = item[metaKey]\n  const isCareer = item['is_career']\n  let name\n\n  if (!content) return null\n\n  if (metaKey !== 'company') {\n    name = content\n  } else if (metaKey === 'company') {\n    return <MetaLink metaKey={metaKey} url={content.url} name={content.name} />\n  } else {\n    name = content.name\n  }\n\n  const type = typeof name\n  const isArray = Array.isArray(name)\n  if (type !== 'string' && type !== 'number' && !isArray) return null\n  const contentMeta = useFormatMessage(`curriculum.${metaKey}`)\n  const meta = metaKey === 'years' && isCareer ? 'Promoci√≥' : contentMeta\n  name = isArray ? name.join(', ') : name\n  return (\n    <div className={styles.metadata}>\n      {metaKey !== 'years' && <strong>{meta}</strong>}\n      <TranslatedMessage text={name} />\n    </div>\n  )\n}\n\nconst CurriculumVitae = ({ title, content, cvPdfPath }) => {\n  const { education, work } = content\n  return (\n    <>\n      <Header title={title}>\n        <div className={styles.infoLine}>\n          <ul>\n            <li>\n              <a href={cvPdfPath} target=\"_blank\" rel=\"noopener noreferrer\">\n                <FormattedMessage id=\"footer.downloadCv\" />\n              </a>\n            </li>\n          </ul>\n        </div>\n      </Header>\n      <Content>\n        {work.map((group, index) => (\n          <div key={index}>\n            <div\n              className={styles.category}\n              style={{\n                backgroundImage: `linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.2)), url(${group.image.childImageSharp.gatsbyImageData.images.fallback.src})`,\n              }}\n            >\n              <h3 className={styles.categoryTitle}>\n                <TranslatedMessage text={group.category} />\n              </h3>\n            </div>\n            <div className={styles.items}>\n              {itemsGrouped(group.items).map((itemGroup, ig) => (\n                <div\n                  className={cx('row', { incompleted: itemGroup.length < 2 })}\n                  key={ig}\n                >\n                  {itemGroup.map((item, index) => (\n                    <div key={index} className={styles.col}>\n                      <div className={styles.item}>\n                        <Title title={item.title} />\n                        {hasMetadata(item) && (\n                          <div className={styles.metadataList}>\n                            {Object.keys(METADATA).map((metaKey) => (\n                              <MetadataItem\n                                key={metaKey}\n                                metaKey={metaKey}\n                                item={item}\n                              />\n                            ))}\n                          </div>\n                        )}\n                        {item.played.length > 0 && (\n                          <div className={styles.places}>\n                            <strong>Productora:</strong>\n                            <div className={styles.placeList}>\n                              {item.played.map((place, index) => (\n                                <div key={index} className={styles.place}>\n                                  <TranslatedMessage text={place.name} />\n                                  {place.location && (\n                                    <span>&nbsp;({place.location})</span>\n                                  )}\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n        <h2 className={styles.sectionTitle}>\n          <FormattedMessage id=\"curriculum.education\" />\n        </h2>\n        <ul className={styles.education}>\n          {education.map((item, index) => (\n            <li key={index}>\n              <div className={styles.educationItem}>\n                <Title title={item.title} />\n                {hasMetadata(item) && (\n                  <div className={styles.metadataList}>\n                    {Object.keys(METADATA).map((metaKey) => (\n                      <MetadataItem\n                        key={metaKey}\n                        metaKey={metaKey}\n                        item={item}\n                      />\n                    ))}\n                  </div>\n                )}\n              </div>\n            </li>\n          ))}\n        </ul>\n      </Content>\n    </>\n  )\n}\n\nexport default CurriculumVitae\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport CurriculumVitae from '../components/CurriculumVitae'\n\nconst CVPage = ({ data, cvPdfPath, location }) => {\n  const { title, locale } = data.markdownRemark.frontmatter\n  const content = data.allCvJson.edges[0].node\n  const metaImage = content.work[0].image.childImageSharp.gatsbyImageData.src\n  return (\n    <Layout pageData={{ ...data, metaImage, locale }} location={location}>\n      {({ cvPdfPath }) => (\n        <CurriculumVitae\n          title={title}\n          cvPdfPath={cvPdfPath}\n          content={content}\n        />\n      )}\n    </Layout>\n  )\n}\n\nexport default CVPage\n\nexport const pageQuery = graphql`query CvPageQuery($id: String!) {\n  markdownRemark(id: {eq: $id}) {\n    frontmatter {\n      id\n      title\n      description\n      keywords\n      locale\n    }\n  }\n  allCvJson {\n    edges {\n      node {\n        education {\n          title {\n            es\n            ca\n          }\n          teacher\n          is_career\n          years\n        }\n        contact {\n          email\n          phone\n        }\n        work {\n          image {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH)\n            }\n          }\n          category {\n            es\n            ca\n          }\n          items {\n            title {\n              es\n              ca\n            }\n            years\n            director\n            production\n            author\n            company {\n              name {\n                es\n                ca\n              }\n              url\n              id\n            }\n            played {\n              id\n              name {\n                es\n                ca\n              }\n              location\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n"],"names":["children","className","styles","useFormatMessage","messageId","intl","useIntl","formatMessage","id","TranslatedMessage","text","translated","useContext","AppContext","locale","console","log","cx","cn","METADATA","teacher","director","author","years","company","production","MetaLink","metaKey","url","name","href","target","hasMetadata","item","Object","keys","map","_meta","meta","Title","title","MetadataItem","content","isCareer","type","isArray","Array","contentMeta","join","cvPdfPath","education","work","Header","rel","Content","group","index","key","style","backgroundImage","image","childImageSharp","gatsbyImageData","images","fallback","src","category","items","reduce","memo","lastRowIndex","length","lastRow","push","itemGroup","ig","incompleted","played","place","location","data","markdownRemark","frontmatter","allCvJson","edges","node","metaImage","Layout","pageData"],"sourceRoot":""}